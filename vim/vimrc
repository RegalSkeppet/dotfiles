set nocompatible " force setting to use features not compatible with vi
set encoding=utf-8 " set encoding

" Start NeoBundle
filetype off
set runtimepath+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-scripts/gnupg.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'ervandew/supertab'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/syntastic'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'chriskempson/base16-vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-obsession'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-scripts/BufOnly.vim'
Plugin 'rust-lang/rust.vim'
Plugin 'mileszs/ack.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-sensible'

call vundle#end()

" Enable all plugins
filetype plugin indent on

syntax enable " enable syntax highlighting
set ttyfast " draw more to terminal
set showcmd " show incomplete commands
set hidden " enable hidden buffers by default
set wildmenu " show a list of possible completions when using <TAB>
set wildmode=list:longest " longest list
" set cursorline " a line where the cursor is
set ruler " row, column in bottom right
set laststatus=2 " always a status line
set number

if isdirectory($HOME . '/.vim/backup') == 0
  :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir=~/.vim/backup/

if isdirectory($HOME . '/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=~/.vim/swap//

if v:version >= 703
  if isdirectory($HOME . '/.vim/undo') == 0
    :silent !mkdir -p ~/.vim/undo >/dev/null 2>&1
  endif
  set undodir=~/.vim/undo//
  "set relativenumber " show relative line numbers
  set undofile " enables persistant undo between file reloads
endif

filetype plugin indent on

"" Whitespace
set nowrap " don't wrap lines
set tabstop=2 " set how many columns a tab i worth
set shiftwidth=2 " sets how many column will be shifted with << and >>
set expandtab " always expand tab to spaces
set backspace=indent,eol,start " enables backspacing through everything

"" Searching
set hlsearch " highlights search matches
set incsearch " start searching as soon as you type your first character
set ignorecase " ignore case when searching
set smartcase " do not ignore case when searching if at least one capital letter is used

if &diff
  colorscheme desert
endif

if has('gui_running')
  set background=dark
  " colorscheme solarized
  set guioptions-=m " remove menu bar
  set guioptions-=T " remove toolbar
  set guioptions-=r " remove right scroll bar
  set guioptions-=L " remove left scroll bar
  set guifont=Monospace\ 16
endif

"" NERDTree
autocmd vimenter * if !argc() | NERDTree | endif

"" SuperTab
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

"" Github markdown
au BufNewFile,BufRead *.md set filetype=ghmarkdown

"" CtrlP
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_user_command = 'ag %s -l --nocolor --ignore node_modules -g ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_by_filename = 1

"" Close buffer without closing window
nnoremap <C-c> :bp\|bd #<CR>

"" vim-go
let g:go_fmt_command = "goimports"

"" Set leader
let mapleader = "\<Space>"
nnoremap <Leader>f :NERDTreeFind<CR>
nnoremap <Leader>o :CtrlPMixed<CR>
nnoremap <Leader>w :w<CR>
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
""nnoremap <CR> G
""nnoremap <BS> gg
map q: :q

"" Wildignore kiliaro project
set wildignore+=*/node_modules/*,*.deb,*.a,*.zip

"" Ack with ag
let g:ackprg = 'ag --nogroup --nocolor --column --ignore node_modules'

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://sunaku.github.io/vim-256color-bce.html
  set t_ut=
endif

"" Örjans cool stuff
set nofoldenable                       " Disable folds
set listchars=eol:↵,tab:→\             " List chars for end of line and tabs
set listchars+=trail:·                 " + trailing white-space
set listchars+=extends:⇉,precedes:⇇    " + side scrolling
set fillchars=vert:\│,fold:·

" Jump to last known (valid) editing position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" F4: Toggle list (display unprintable characters).
nnoremap <silent> <F4> :setl list!<Bar>setl list?<CR>
